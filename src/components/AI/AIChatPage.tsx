import React, { useState } from 'react';
import { MobileLayout } from '../Layout/MobileLayout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Send, Bot, User, Sparkles, Image, Mic, Camera } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

interface ChatMessage {
  id: number;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  suggestions?: string[];
}

export const AIChatPage = () => {
  const navigate = useNavigate();
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: 1,
      text: 'üëã Xin ch√†o! T√¥i l√† Angel AI - tr·ª£ l√Ω th·ªùi trang c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:',
      sender: 'ai',
      timestamp: new Date(),
      suggestions: [
        'T∆∞ v·∫•n outfit theo d√°ng ng∆∞·ªùi',
        'G·ª£i √Ω mix & match',
        'T√¨m s·∫£n ph·∫©m ph√π h·ª£p',
        'Xu h∆∞·ªõng th·ªùi trang m·ªõi',
        'AI th·ª≠ ƒë·ªì ·∫£o'
      ]
    }
  ]);
  const [newMessage, setNewMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const quickSuggestions = [
    'Outfit ƒëi l√†m',
    'Phong c√°ch H√†n Qu·ªëc',
    'V√°y d·ª± ti·ªác',
    '√Åo kho√°c m√πa ƒë√¥ng',
    'Ph·ª• ki·ªán trendy',
    'Mix ƒë·ªì cao c·∫•p'
  ];

  const sendMessage = (text?: string) => {
    const messageText = text || newMessage;
    if (!messageText.trim()) return;

    const userMessage: ChatMessage = {
      id: messages.length + 1,
      text: messageText,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setNewMessage('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(messageText);
      const aiMessage: ChatMessage = {
        id: messages.length + 2,
        text: aiResponse.text,
        sender: 'ai',
        timestamp: new Date(),
        suggestions: aiResponse.suggestions,
      };
      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 2000);
  };

  const generateAIResponse = (userMessage: string) => {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('th·ª≠ ƒë·ªì') || lowerMessage.includes('ai th·ª≠ ƒë·ªì')) {
      return {
        text: 'üî• AI Th·ª≠ ƒê·ªì l√† t√≠nh nƒÉng si√™u hot! B·∫°n c√≥ th·ªÉ:\n\n‚Ä¢ T·∫£i ·∫£nh to√†n th√¢n c·ªßa m√¨nh\n‚Ä¢ Ch·ªçn s·∫£n ph·∫©m mu·ªën th·ª≠\n‚Ä¢ Xem k·∫øt qu·∫£ th·∫≠t nh∆∞ th·∫≠t\n‚Ä¢ Chia s·∫ª v·ªõi b·∫°n b√®\n\nH√£y th·ª≠ ngay ƒë·ªÉ c·∫£m nh·∫≠n s·ª± kh√°c bi·ªát!',
        suggestions: ['Th·ª≠ ƒë·ªì ngay', 'H∆∞·ªõng d·∫´n chi ti·∫øt', 'Xem v√≠ d·ª•']
      };
    }
    
    if (lowerMessage.includes('outfit') || lowerMessage.includes('ph·ªëi ƒë·ªì')) {
      return {
        text: '‚ú® T√¥i s·∫Ω gi√∫p b·∫°n t·∫°o outfit ho√†n h·∫£o! ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n\n‚Ä¢ D√°ng ng∆∞·ªùi c·ªßa b·∫°n\n‚Ä¢ M√†u da\n‚Ä¢ S·ªü th√≠ch phong c√°ch\n‚Ä¢ D·ªãp s·ª≠ d·ª•ng\n\nT√¥i s·∫Ω g·ª£i √Ω nh·ªØng items ph√π h·ª£p nh·∫•t t·ª´ Angel Fashion!',
        suggestions: ['D√°ng ng∆∞·ªùi nh·ªè b√©', 'Phong c√°ch thanh l·ªãch', 'ƒêi l√†m vƒÉn ph√≤ng', 'D·ª± ti·ªác cu·ªëi tu·∫ßn']
      };
    }
    
    if (lowerMessage.includes('m√†u') || lowerMessage.includes('color')) {
      return {
        text: 'üåà M√†u s·∫Øc r·∫•t quan tr·ªçng! D·ª±a v√†o t√¥ng da c·ªßa b·∫°n:\n\n‚Ä¢ Da s√°ng: Pastel, m√†u l·∫°nh\n‚Ä¢ Da ngƒÉm: M√†u ·∫•m, earth tone\n‚Ä¢ Da v√†ng: Coral, cam, ƒë·ªè\n\nB·∫°n thu·ªôc t√¥ng da n√†o ƒë·ªÉ t√¥i t∆∞ v·∫•n chi ti·∫øt h∆°n?',
        suggestions: ['Da s√°ng', 'Da ngƒÉm', 'Da v√†ng', 'Kh√¥ng bi·∫øt t√¥ng da']
      };
    }
    
    if (lowerMessage.includes('size') || lowerMessage.includes('k√≠ch th∆∞·ªõc')) {
      return {
        text: 'üìè Ch·ªçn size ƒë√∫ng r·∫•t quan tr·ªçng! Angel Fashion c√≥ b·∫£ng size chi ti·∫øt:\n\nS: 45-50kg, vai 36-38cm\nM: 50-55kg, vai 38-40cm\nL: 55-60kg, vai 40-42cm\n\nB·∫°n c√≥ th·ªÉ inbox s·ªë ƒëo 3 v√≤ng ƒë·ªÉ t√¥i t∆∞ v·∫•n size ch√≠nh x√°c nh·∫•t!',
        suggestions: ['G·ª≠i s·ªë ƒëo', 'Xem b·∫£ng size', 'T∆∞ v·∫•n size √°o', 'T∆∞ v·∫•n size qu·∫ßn']
      };
    }

    return {
      text: 'ü§ñ T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m v·ªÅ th·ªùi trang! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T∆∞ v·∫•n outfit theo body\n‚Ä¢ G·ª£i √Ω m√†u s·∫Øc ph√π h·ª£p\n‚Ä¢ Ch·ªçn size chu·∫©n\n‚Ä¢ Xu h∆∞·ªõng m·ªõi nh·∫•t\n‚Ä¢ Mix & match s·∫£n ph·∫©m\n‚Ä¢ AI th·ª≠ ƒë·ªì ·∫£o\n\nB·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ ƒëi·ªÅu g√¨?',
      suggestions: ['T∆∞ v·∫•n outfit', 'Ch·ªçn m√†u s·∫Øc', 'H∆∞·ªõng d·∫´n size', 'AI th·ª≠ ƒë·ªì']
    };
  };

  const handleSuggestionClick = (suggestion: string) => {
    if (suggestion === 'AI th·ª≠ ƒë·ªì ·∫£o' || suggestion === 'Th·ª≠ ƒë·ªì ngay') {
      navigate('/ai-tryon');
    } else {
      sendMessage(suggestion);
    }
  };

  return (
    <MobileLayout>
      <div className="flex flex-col h-screen pb-20">
        {/* Header */}
        <div className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-4">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
              <Bot size={24} />
            </div>
            <div>
              <h1 className="font-bold">Angel AI</h1>
              <p className="text-sm text-white/80">Tr·ª£ l√Ω th·ªùi trang th√¥ng minh</p>
            </div>
            <div className="ml-auto flex space-x-2">
              <Button
                variant="ghost"
                size="sm"
                className="text-white border-white/30"
                onClick={() => navigate('/ai-tryon')}
              >
                <Camera size={16} className="mr-1" />
                AI Th·ª≠ ƒê·ªì
              </Button>
              <Badge className="bg-white/20 text-white border-white/30">
                <Sparkles size={12} className="mr-1" />
                AI
              </Badge>
            </div>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className="max-w-[85%] space-y-2">
                <div
                  className={`p-3 rounded-2xl ${
                    message.sender === 'user'
                      ? 'bg-primary text-white ml-auto'
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  <p className="text-sm whitespace-pre-line">{message.text}</p>
                </div>
                
                {message.suggestions && (
                  <div className="flex flex-wrap gap-2">
                    {message.suggestions.map((suggestion, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        size="sm"
                        className="text-xs h-8"
                        onClick={() => handleSuggestionClick(suggestion)}
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-gray-100 p-3 rounded-2xl">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Quick Suggestions */}
        <div className="px-4 pb-2">
          <div className="flex space-x-2 overflow-x-auto scrollbar-hide">
            {quickSuggestions.map((suggestion, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                className="whitespace-nowrap"
                onClick={() => sendMessage(suggestion)}
              >
                {suggestion}
              </Button>
            ))}
          </div>
        </div>

        {/* Input */}
        <div className="bg-white border-t p-4">
          <div className="flex items-center space-x-2">
            <Button variant="ghost" size="icon">
              <Image size={20} />
            </Button>
            <div className="flex-1">
              <Input
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                placeholder="H·ªèi Angel AI v·ªÅ th·ªùi trang..."
                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              />
            </div>
            <Button variant="ghost" size="icon">
              <Mic size={20} />
            </Button>
            <Button size="icon" onClick={() => sendMessage()}>
              <Send size={20} />
            </Button>
          </div>
        </div>
      </div>
    </MobileLayout>
  );
};
